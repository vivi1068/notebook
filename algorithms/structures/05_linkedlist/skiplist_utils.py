# 默认情况下, 最大层级: 16
# pow(2, 16) = 65536, 即: max_level = 16 的情况下, 当前 SkipList 允许最多存储 65536 个节点.
# math.log2(65536) = 16; 通过节点数量逆运算出理想的层高.
#
# 第 1层链表,包含所有节点.                                               一共有 65536 个节点
# 第 2层链表,每间隔    2个(第1层链表)节点,复制当前节点作为第 2层链表的节点;一共有 32768 个节点
# 第 3层链表,每间隔    4个(第1层链表)节点,复制当前节点作为第 3层链表的节点;一共有 16384 个节点
# 第 4层链表,每间隔    8个(第1层链表)节点,复制当前节点作为第 4层链表的节点;一共有 8192 个节点
# 第 5层链表,每间隔   16个(第1层链表)节点,复制当前节点作为第 5层链表的节点;一共有 4096 个节点
# 第 6层链表,每间隔   32个(第1层链表)节点,复制当前节点作为第 6层链表的节点;一共有 2048 个节点
# 第 7层链表,每间隔   64个(第1层链表)节点,复制当前节点作为第 7层链表的节点;一共有 1024 个节点
# 第 8层链表,每间隔  128个(第1层链表)节点,复制当前节点作为第 8层链表的节点;一共有 512 个节点
# 第 9层链表,每间隔  256个(第1层链表)节点,复制当前节点作为第 9层链表的节点;一共有 256 个节点
# 第10层链表,每间隔  512个(第1层链表)节点,复制当前节点作为第10层链表的节点;一共有 128 个节点
# 第11层链表,每间隔 1024个(第1层链表)节点,复制当前节点作为第11层链表的节点;一共有 64 个节点
# 第12层链表,每间隔 2048个(第1层链表)节点,复制当前节点作为第12层链表的节点;一共有 32 个节点
# 第13层链表,每间隔 4096个(第1层链表)节点,复制当前节点作为第13层链表的节点;一共有 16 个节点
# 第14层链表,每间隔 8192个(第1层链表)节点,复制当前节点作为第14层链表的节点;一共有  8 个节点
# 第15层链表,每间隔16384个(第1层链表)节点,复制当前节点作为第15层链表的节点;一共有  4 个节点(node-0, node-16384, node-49152, node-65536)
# 第16层链表,每间隔32768个(第1层链表)节点,复制当前节点作为第16层链表的节点;一共有  3 个节点(node-0, node-32768, node-65536)
#
# 边界情况:
# 第 16 层会在 32768 个节点出建立一个节点, 即: 0-32767 为有效左, 32768 - 65535 为有效右,
# 由此得出第 16 层最多可以存储 65536 个节点.
import math


def max_nodes(level: int):
    return pow(2, level)


def max_level(nodes: int):

    return math.log2(nodes)


